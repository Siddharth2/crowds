{
    "contents" : "library(stats)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(iterators)\nlibrary(xtable)\nlibrary(crowds)\n\n# setwd(\"d:\")\n# dir <- \"../../data/demo_data/\"\ndir <- \"D:/Stanford/crowds/crowds/data/demo_data/\"\nsetwd(dir)\n\n# Set ggplot2 theme to black & white\ntheme_set(theme_bw())\n\n\n######################################################################################################\n\n# Load data\n# treat empty cells as NA\nresponses <- read.delim('../../data/demo_data/answers.tsv', header = TRUE, na.strings=c(\"\",\"NA\"))\nusers <- read.delim('../../data/demo_data/users.tsv', header = TRUE, na.strings=c(\"\",\"NA\"))\ndomains <- read.delim('../../data/demo_data/domains.tsv', header = TRUE, na.strings=c(\"\",\"NA\"))\ntasks <- read.delim('../../data/demo_data/tasks.tsv', header = TRUE, na.strings=c(\"\",\"NA\"))\n\n# shorten domain names\ndomains$name <-c(\"MagicTrick\",\"Landmarks\",\"Penalties\",\"Calories\",\"ThemeSongs\")\n\n# change \"id\" to \"task_id\" / \"user_id\" so it can be merged with responses data\ntasks <- rename(tasks, task_id=id)\nusers <- rename(users, user_id=id)\ndomains <- rename(domains, domain_id=id)\n\nresponses <- responses %>% \n      mutate(time = as.numeric(difftime(strptime(submitted_at,\"%Y-%m-%d %H:%M:%S\"),\n                                    strptime(created_at,\"%Y-%m-%d %H:%M:%S\"))))\n\n# merge data frames\ncrowd_data <- responses %>% \n                inner_join(tasks, by=\"task_id\") %>%\n                inner_join(users, by=\"user_id\") %>%\n                select(task_id,\n                       user_id, \n                       answer = data.x,\n                       confidence,\n                       domain_id,\n                       qn_type = answer_type,\n                       asset_type = type,\n                       correct_answer,\n                       age, \n                       gender, \n                       education,\n                       employment,\n                       experimental_condition,\n                       time,\n                       status)  %>%\n                inner_join(domains, by=\"domain_id\")  %>% \n                select(-c(created_at, updated_at, description, time_limit))\n              \n\n\n# change type for the answer & correct_answer columns\n# takes the place of \"stringsAsFactors = FALSE\"\ncrowd_data <- crowd_data %>% \n  mutate(answer = as.character(answer), \n         correct_answer = trim(as.character(correct_answer)))\n\n# flag answers that \"timedout\" and \"null\" with NA\ncrowd_data <- filter(crowd_data, answer!=\"timeout\", answer!=\"null\")\n\n# check\ndim(crowd_data)\nnames(crowd_data)\nsummary(crowd_data)\n\n# transposed view, similar to \"strucutre\" function\nglimpse(crowd_data)  \n\n\n\n######################################################################################################\n\n# was the answer correct?\n# \n# new columns\n#  is_correct: binary 0 or 1. \n#               For multiple choice quesitons only. 1 if correct, 0 if incorrect\n#  abs_error: the absolute difference between the individual answer and the correct answer\n#  rel_error: the relative difference between the individual answer and the correct answer\ncrowd_data <- crowd_data %>% \n  mutate(is_correct = ifelse(qn_type == \"select\" & as.character(answer) == as.character(correct_answer), TRUE, FALSE), \n         abs_error = ifelse(qn_type == \"int\", abs(as.numeric(answer)-as.numeric(correct_answer)), NA),\n         rel_error = ifelse(qn_type == \"int\", abs_error/as.numeric(correct_answer), NA))\n \n# fix 'Inf' values in rel_error (assign to 1)\ncrowd_data <- crowd_data %>% \n  mutate(rel_error = ifelse(qn_type == \"int\" & rel_error==\"Inf\", 1, rel_error))\n\nhead(crowd_data)\n \n####################################################################################################\n# exploratory analysis\n\n# age\nhist_age <- qplot(age, data=crowd_data, geom=\"histogram\", binwidth=1)\n\n# education\nhist_edu <- qplot(education, data=crowd_data, geom=\"histogram\")  \n\n# gender\nhist_gender <- qplot(gender, data=crowd_data, geom=\"histogram\")\n\n# employment\nhist_employment <- qplot(employment, data=crowd_data, geom=\"histogram\")\n\n# asset type\nhist_asset <- qplot(asset_type, data=crowd_data, geom=\"histogram\")\n\n# confidence\nhist_confidence <- ggplot(crowd_data, aes(x=confidence)) +\n                    geom_histogram(binwidth = 0.5) +\n                    scale_x_continuous(breaks=0:5)\n                  \n\n# user performance -- MC questions (total 80 questions)\nuser_perf_mc <- crowd_data %>% \n                      filter(qn_type==\"select\") %>%\n                      group_by(user_id) %>%  \n                      summarise(av_correct = mean(is_correct)) %>%\n                      with(qplot(x=av_correct, \n                                 geom=\"histogram\", \n                                 stat=\"bin\",\n                                 binwidth = 0.05,\n                                 xlab = \"average correct\"))\n\n\n# user performance -- point estimate questions (total 20 qns)\nuser_perf_pe <- crowd_data %>% \n                      filter(qn_type==\"int\") %>%\n                      group_by(user_id) %>%  \n                      summarise(av_rel_err = mean(as.numeric(rel_error))) %>%\n                      with(qplot(x=av_rel_err, \n                                 geom=\"histogram\", \n                                 binwidth = 0.3,\n#                                  xlim=c(0,5),\n                                 xlab = \"average distance from correct answer\"))\n\n\n# average score for MC by asset type\nscore_by_asset <- crowd_data %>% \n                  filter(qn_type==\"select\") %>% \n                  group_by(asset_type) %>%  \n                  summarise(av_score = mean(as.numeric(is_correct))) \n\nxtable(score_by_asset, caption = \"Average score by asset type for all domains.\")\n\n#   type  av_score\n# 1 audio 0.1018364\n# 2 image 0.7067901\n# 3 video 0.5745423\n\n\n\n# time to answer qn\ntime_stats <- crowd_data %>% \n                  group_by(asset_type) %>%  \n                  summarise(av_time = mean(time), \n                            median_time = median(time)) \n\nxtable(time_stats, caption = \"Average and median time to answer question by asset type for all domains.\")\n\n# asset_type  av_time   median_time\n# 1      audio 18.04174          16\n# 2      image 12.25598          11\n# 3      video 17.72799          17\n\n\n\n\n\n  \n###################################################################################################\n\n# Correlations\n\n\n# education vs. performance on mc question   \nscore_by_edu <- group_by(crowd_data, education) %>%  \n                accuracy_by_group()\n\nxtable(score_by_edu, caption = \"Average score by education level all domains.\")\n\n# education             pct_correct  av_dist\n# 1            Bachelor   0.3899791 1.456040\n# 2              Master   0.4800000 1.278620\n# 3   Primary education   0.4218750 1.215210\n# 4 Secondary education   0.3766578 1.424537\n\n\n\n# confidence vs. performance on mc question   \nscore_by_conf <- group_by(crowd_data, confidence) %>%  \n                  accuracy_by_group()\n\n# confidence pct_correct   av_dist\n# 1          1   0.2154341 1.3504182\n# 2          2   0.1599265 1.5002094\n# 3          3   0.3000000 1.3280794\n# 4          4   0.4785276 2.0073925\n# 5          5   0.6930295 0.6639404\nxtable(score_by_conf, caption = \"Average score by confidence level all domains.\")\n\n\n# % correct - MC questions\nplot_conf_mc <- qplot(x = confidence, \n                      y = pct_correct, \n                      data = conf, \n                      ylim = c(0,1), \n                      size = 16, \n                      legend.position = \"none\")    # FIX!\n\n\n# realtive distance - point estimate questions\nplot_conf <-  qplot(x=confidence, \n                y=av_dist, \n                data=conf,  \n                size=16, \n                legend.position = \"none\")\n\n\n# time vs. relative error / confidence\ntime_confidence <- crowd_data %>% \n                      filter(qn_type==\"int\") %>%\n                      group_by(task_id, user_id) %>%  \n                      summarise(time = time, \n                                confidence = confidence, \n                                rel_error = rel_error)\n\nggplot(data = time_confidence,\n       aes(x = time,\n           y = rel_error, \n           color=confidence)) +\n  geom_point()\n\n\n\n\n# individual user performance vs education (all tasks) - MC\nscatter_edu <- filter(crowd_data, qn_type==\"select\")  %>% \n                group_by(education, user_id) %>% \n                agg.plot.users()\n  \n\n# # individual user performance vs education (all tasks) - point estimate\n# plot10 <- filter(crowd_data, qn_type==\"int\")  %>% \n#           group_by(user_id, education) %>% \n#           agg.plot.users()\n\n\n\n\n# accuracy, confidence vs. social condition - MC\nexp_condition <- crowd_data %>%\n                    filter(qn_type == \"select\") %>%\n                    group_by(task_id, experimental_condition) %>%\n                    summarise(confidence = mean(confidence),\n                              true_answer = correct_answer[1],\n                              crowd_answer = Mode(answer),\n                              is_correct = ifelse(true_answer == crowd_answer, TRUE, FALSE), \n                              time = mean(time)) %>%\n                    group_by(experimental_condition) %>%\n                    summarise(av_confidence = mean(confidence),\n                              time = mean(time),\n                              av_score = mean(is_correct))\n\nxtable(exp_condition, caption = \"Statistics for experimental condition.\")\n\n# experimental_condition av_confidence     time av_score\n# 1                control      3.284140 15.67757   0.6625\n# 2                 social      3.541124 15.26173   0.6750\n\n# compare to:\n# time_social <- crowd_data %>% \n#   group_by(experimental_condition) %>%  \n#   summarise()\n\n\n\n\n####################################################################################################\n# aggregation\n\n# MC - crowd score\ncrowd_data %>%\n  filter(qn_type==\"select\") %>%\n  group_by(task_id) %>%\n  summarise(domain_id = domain_id[1],\n            name = Mode(name),\n            true_answer = correct_answer[1],\n            crowd_answer = Mode(answer),\n            is_correct = ifelse(true_answer == crowd_answer, TRUE, FALSE)) %>%\n  group_by(domain_id) %>%\n  summarise(name = name[1],\n            crowd_score = sum(is_correct))\n\n# domain_id       name crowd_score\n# 1         3 MagicTrick          20\n# 2         7  Landmarks          18\n# 3        12  Penalties          12\n# 4        53 ThemeSongs           4\n\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n# domain / confidence & accuracy\nconf_err <- crowd_data %>%\n                group_by(task_id) %>%\n                summarise(domain_id = domain_id[1],\n                          name = name[1],\n                          confidence = mean(confidence), \n                          correct_answer = correct_answer[1],\n                          crowd_answer = Mode(answer),\n                          correct = ifelse(correct_answer == crowd_answer, TRUE, FALSE),\n                          av_relerror = mean(rel_error), \n                          median_relerror = median(rel_error)) %>%\n                group_by(domain_id) %>%\n                summarise(name = name[1], \n                          confidence = median(confidence),\n                          crowd_score_mc = sum(correct),\n                          crowd_av_error = mean(av_relerror),\n                          crowd_median_err = mean(median_relerror)) \n\nxtable(conf_err, caption = \"Confidence vs domain error.\")\n\n\n# domain_id       name confidence crowd_score_mc crowd_av_error crowd_median_err\n# 1         3 MagicTrick   3.836667             20             NA               NA\n# 2         7  Landmarks   3.876833             18             NA               NA\n# 3        12  Penalties   2.750278             12             NA               NA\n# 4        19   Calories   2.754301             NA       1.430227        0.6902689\n# 5        53 ThemeSongs   2.823958              4             NA               NA\n\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n# point estimate\n\n# add relative / absolute error\ncrowd_stats_pe <- crowd_data %>%\n          filter(qn_type==\"int\")  %>%\n          group_by(task_id, domain_id) %>%\n          summarise(domain = domain_id[1],\n                    nr.responses = n(),\n                    true_answer = as.numeric(correct_answer[1]),\n                    abs_error_av = mean(abs_error),\n                    abs_error_med = median(abs_error),\n                    rel_error_av = mean(rel_error),\n                    rel_error_med = median(rel_error),\n                    crowd_mean = mean(as.numeric(answer)), \n                    crowd_median = median(as.numeric(answer)),\n                    crowd_geom_mean = geometric_mean(as.numeric(answer)),\n                    crowd_trunc_mean = truncated_mean(as.numeric(answer)), \n                    crowd_trunc_geom_mean = truncated_geometric_mean(as.numeric(answer)),\n                    rank_mean = rank(as.numeric(answer), crowd_mean, true_answer), \n                    rank_median = rank(as.numeric(answer), crowd_median, true_answer),\n                    rank_geom = rank(as.numeric(answer), crowd_geom_mean, true_answer),\n                    rank_trunc_mean = rank(as.numeric(answer), crowd_trunc_mean, true_answer),\n                    rank_trunc_geom_mean = rank(as.numeric(answer), crowd_trunc_geom_mean, true_answer)) %>%\n          group_by(domain) %>%\n          summarise(abs_error_mean = mean(abs_error_av),\n                    abs_error_median = mean(abs_error_med),\n                    rel_error_mean = mean(rel_error_av),\n                    rel_error_median = mean(rel_error_med),\n                    rank_mean = mean(as.numeric(rank_mean)), \n                    rank_median = mean(as.numeric(rank_median)), \n                    rank.geom.mean = mean(as.numeric(rank_geom)), \n                    rank_trunc_mean = mean(as.numeric(rank_trunc_mean)), \n                    rank_trunc_geom_mean = mean(as.numeric(rank_trunc_geom_mean)))\n\nxtable(t(crowd_stats_pe), \n       caption = \"Point estimate domains ranked according to average ranking. Columns represent \n       the ranking by using the corresponding method of aggregation. Average ranking takes the \n       mean of the crowd percentiles for each task.\")\n\n\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n# vector of individual scores / domain for ranking\n\n# find the score of each individual for the domain \ni_scores <- crowd_data %>%\n              filter(qn_type==\"select\") %>%\n              group_by(domain_id, user_id)  %>%\n              summarise(score = sum(is_correct)) \n\n# create an iterator object to loop over domains, \n# and a list to store the vector of individual scores\ni_responses <- vector('list', nr_domains)\nunique_domains <- unique(i_scores$domain_id)\nnr_domains <- length(unique_domains)\ndomains_iter <- iter(unique_domains)\n\n# scores for individuals by domain\nfor (i in 1:nr_domains){\n  domain_i <- nextElem(domains_iter)\n  print(domain_i)\n  indiv_i <- subset(i_scores, as.numeric(domain_id)==as.numeric(domain_i))\n  i_responses[[i]] <- indiv_i$score\n}        \ni_responses\n\n\n# crowd score by domain (taking the mode of the answers for each task)\ncrowd_stats_mc <- crowd_data %>%\n  filter(qn_type==\"select\") %>%\n  group_by(task_id)  %>%\n  summarise(domain_id = domain_id[1],\n            crowd_response = Mode(answer),\n            true_answer = correct_answer[1],\n            crowd_is_correct=sum(ifelse(crowd_response==true_answer,1,0))) %>%\n  group_by(domain_id) %>%\n  summarise(crowd_score = sum(crowd_is_correct))\n\n\n# find crowd ranking\nresults <- data.frame(matrix(NA, nr_domains, 4))\nnames(results) <- c('domain_id', 'domain_name', 'crowd_score', 'crowd_rank')\nfor (i in 1:nr_domains){\n  crowd_points <- crowd_stats_mc$crowd_score[i]\n  results[i,1] <- unique_domains[i]\n  results[i,2] <- domains$name[i]\n  results[i,3] <- crowd_stats_mc$crowd_score[i]\n  results[i,4] <- rank(i_responses[[i]], crowd_points, 20) \n}\nresults\n\n\n# domain_id crowd_score crowd_rank\n# 1         3          20  1.0000000\n# 2         7          18  0.9166667\n# 3        12          12  0.8235294\n# 4        53           4  1.0000000\n\nxtable(results, \n       caption = \"Multiple Choice domains. The Crowd Ranking column contains\n       the percentage of users the crowd performs better than. \n       Score is the number of answers the crowd got right.\")\n\n\n\n# plot crowd score vs sample size \nsample_size(3, 100)      # MagicTrick\nsample_size(7, 100)      # Landmarks\nsample_size(12, 100)     # Penalties\nsample_size(53, 100)     # ThemeSongs\nsample_size_cont(19,100) # Calories",
    "created" : 1431323688971.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "164998309",
    "id" : "3020ADC1",
    "lastKnownWriteTime" : 1431324842,
    "path" : "D:/Stanford/crowds/crowds/src/demo_analysis/dplyr_analysis.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}